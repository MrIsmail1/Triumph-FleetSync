"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const PrismaSessionRepository_1 = require("../../../../adapters/repositories/PrismaSessionRepository");
const PrismaUserRepository_1 = require("../../../../adapters/repositories/PrismaUserRepository");
const PrismaVerificationCodeRepository_1 = require("../../../../adapters/repositories/PrismaVerificationCodeRepository");
const BcryptPasswordHasherService_1 = require("../../services/BcryptPasswordHasherService");
const ResendEmailService_1 = require("../../services/ResendEmailService");
const prisma_db_1 = require("../config/prisma.db");
const AuthController_1 = require("../controllers/AuthController");
const authRoutes = (0, express_1.Router)();
const prismaUserRepository = new PrismaUserRepository_1.PrismaUserRepository(prisma_db_1.prisma);
const prismaVerificationCodeRepository = new PrismaVerificationCodeRepository_1.PrismaVerificationCodeRepository(prisma_db_1.prisma);
const prismaSessionRepository = new PrismaSessionRepository_1.PrismaSessionRepository(prisma_db_1.prisma);
const bcryptPasswordHasher = new BcryptPasswordHasherService_1.BcryptPasswordHasherService();
const resendEmailService = new ResendEmailService_1.ResendEmailService();
const authController = new AuthController_1.AuthController(prismaUserRepository, prismaVerificationCodeRepository, prismaSessionRepository, bcryptPasswordHasher, resendEmailService);
authRoutes.post("/register", authController.registerHandler);
authRoutes.post("/login", authController.loginHandler);
authRoutes.get("/logout", authController.logoutHandler);
authRoutes.get("/refresh", authController.refreshHandler);
authRoutes.get("/email/verify/:code", authController.verifyEmailHandler);
authRoutes.post("/password/forgot", authController.sendPasswordResetHandler);
authRoutes.post("/password/reset", authController.resetPasswordHandler);
exports.default = authRoutes;
