generator client {
  provider = "prisma-client-js"
  output   = "../../platforms/express/node_modules/.prisma/client"
}

generator client_deno {
  provider        = "prisma-client-js"
  previewFeatures = ["deno"]
  output          = "./generated/client-deno"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(uuid())
  firstName         String
  lastName          String
  email             String              @unique
  passwordHash      String
  role              String
  isVerified        Boolean             @default(false)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  breakdowns        Breakdown[]
  maintenances      Maintenance[]
  Motorbike         Motorbike[]
  Driver            Driver[]
  Fleet             Fleet[]
  Try               Try[]
  MotorbikeIncident MotorbikeIncident[]
}

model DriverHistorical {
  id          String   @id @default(uuid())
  driverId    String
  motorbikeId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  driver    Driver    @relation(fields: [driverId], references: [id])
  motorbike Motorbike @relation(fields: [motorbikeId], references: [id])

  @@index([driverId])
  @@index([motorbikeId])
}

model VerificationCode {
  id        String   @id @default(uuid())
  userId    String
  type      String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  userAgent String?
}

model Maintenance {
  id                     String     @id @default(uuid())
  motorbikeId            String
  companyOrDealerShipId  String
  companyOrDealerShip    User       @relation(fields: [companyOrDealerShipId], references: [id])
  motorbike              Motorbike  @relation(fields: [motorbikeId], references: [id])
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt
  maintenanceDate        DateTime
  mileageAtMaintenance   Int
  maintenanceType        String
  maintenanceCost        Float
  maintenanceDescription String
  breakdownId            String?    @unique
  warrantyId             String?    @unique
  breakdown              Breakdown? @relation(fields: [breakdownId], references: [id])
  warranty               Warranty?  @relation(fields: [warrantyId], references: [id])

  @@index([motorbikeId])
  @@index([companyOrDealerShipId])
}

model Driver {
  id                         String   @id @default(uuid())
  firstName                  String
  lastName                   String
  email                      String   @unique
  companyOrDealerShipId      String
  frenchLicenseNumber        String
  dateDeliveryLicence        DateTime
  dateExpirationLicense      DateTime
  frenchTypeMotorbikeLicense String
  restrictionConditions      String
  experience                 String
  motorbikeId                String?
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt

  companyOrDealerShip User                @relation(fields: [companyOrDealerShipId], references: [id])
  Motorbike           Motorbike[]
  DriverHistorical    DriverHistorical[]
  Try                 Try[]
  MotorbikeIncident   MotorbikeIncident[]

  @@index([companyOrDealerShipId])
}

model Motorbike {
  id                          String              @id @default(uuid())
  modelId                     String
  fleetId                     String?
  companyOrDealerShipId       String?
  driverId                    String?
  licensePlate                String              @unique
  vehicleIdentificationNumber String              @unique
  color                       String
  mileage                     Int
  status                      String
  createdAt                   DateTime            @default(now())
  updatedAt                   DateTime            @updatedAt
  maintenances                Maintenance[]
  DriverHistorical            DriverHistorical[]
  Try                         Try[]
  MotorbikeIncident           MotorbikeIncident[]

  modelMotorbike      ModelMotorbike @relation(fields: [modelId], references: [id])
  CompanyOrDealerShip User?          @relation(fields: [companyOrDealerShipId], references: [id])
  Driver              Driver?        @relation(fields: [driverId], references: [id])
  Fleet               Fleet?         @relation(fields: [fleetId], references: [id])

  @@index([companyOrDealerShipId])
  @@index([driverId])
  @@index([fleetId])
}

model Breakdown {
  id                    String       @id @default(uuid())
  companyOrDealerShipId String
  companyOrDealerShip   User         @relation(fields: [companyOrDealerShipId], references: [id])
  description           String
  actionTaken           String
  resolved              Boolean      @default(false)
  resolutionDate        DateTime?
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  maintenance           Maintenance?

  @@index([companyOrDealerShipId])
}

model Warranty {
  id              String       @id @default(uuid())
  validFrom       DateTime
  validUntil      DateTime
  providerName    String
  warrantyDetails String
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  maintenance     Maintenance?
}

model Fleet {
  id                    String      @id @default(uuid())
  companyOrDealerShipId String
  name                  String
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  motorbikes            Motorbike[]

  companyOrDealerShip User @relation(fields: [companyOrDealerShipId], references: [id])

  @@index([companyOrDealerShipId])
}

model ModelMotorbike {
  id                            String      @id @default(uuid())
  name                          String
  brand                         String
  maintenanceIntervalKm         Int
  maintenanceIntervalTimeMonths Int
  createdAt                     DateTime    @default(now())
  updatedAt                     DateTime    @updatedAt
  Motorbike                     Motorbike[]
}

model Try {
  id           String   @id @default(uuid())
  dealershipId String
  driverId     String
  motorbikeId  String
  endDate      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  driver     Driver    @relation(fields: [driverId], references: [id])
  motorbike  Motorbike @relation(fields: [motorbikeId], references: [id])
  dealership User      @relation(fields: [dealershipId], references: [id])

  @@index([driverId])
  @@index([motorbikeId])
}

model MotorbikeIncident {
  id                    String   @id @default(uuid())
  companyOrDealerShipId String
  driverId              String
  motorbikeId           String
  incidentType          String
  comment               String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  driver     Driver    @relation(fields: [driverId], references: [id])
  motorbike  Motorbike @relation(fields: [motorbikeId], references: [id])
  dealership User      @relation(fields: [companyOrDealerShipId], references: [id])

  @@index([driverId])
  @@index([motorbikeId])
}
